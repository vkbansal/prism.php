<?php

require __DIR__."/../spectrum/vendor/autoload.php";
require __DIR__."/vendor/autoload.php";

use League\CLImate\CLImate;
use League\Flysystem\Filesystem;
use League\Flysystem\Adapter\Local as Adapter;
use Symfony\Component\Yaml\Yaml;
use VKBansal\FrontMatter\Parser;
use VKBansal\Spectrum\Components\Plugin;
use VKBansal\Spectrum\Spectrum;

$fs = new Filesystem(new Adapter(__DIR__));

$console = new CLImate();

$twig = new Twig_Environment(new Twig_Loader_Filesystem(__DIR__.'/_layouts'));

$parsedown = new ParsedownExtra();

$highlighter = new Spectrum();
$highlighter->loadAllDefinitions();
libxml_use_internal_errors(true);

function filter_dirs($file) {
    return $file['type'] !== 'dir';
}

/**************************************************************
 Load meta data
 **************************************************************/
$site = Yaml::parse($fs->read('_config.yml'));

$ymls = $fs->listContents("/_data");
$ymls = array_filter($ymls, 'filter_dirs');
$site['data'] = [];

foreach ($ymls as $yml) {
    $site['data'][$yml['filename']] = Yaml::parse($fs->read($yml['path']));
}

/**************************************************************
 First level pages
 **************************************************************/
$pages = $fs->listContents("/_pages");
$pages = array_filter($pages, 'filter_dirs');

foreach ($pages as $page) {
    $active = $page['filename'];

    $content = $parsedown->text($fs->read($page['path']));
    $content = $twig->render('default.html', compact('content', 'active', 'site'));
    $content = $highlighter->highlightHTML($content);
    $console->out("<light_green>Building</light_green> <bold><light_cyan>{$active}<light_cyan></bold>");

    if ($page['filename'] == "index") {
        $fs->put('index.html', $content);
    } else {
        $fs->put("/{$active}/index.html", $content);
    }
}

/**************************************************************
 * Plugin pages
 **************************************************************/
$plugins = $fs->listContents("/_pages/plugins");
$plugins = array_filter($plugins, 'filter_dirs');
foreach ($plugins as $plugin) {
    $active = $plugin['filename'];
    $highlighter->resetPlugins();
    $console->out("<light_green>Building</light_green> <bold><light_cyan>{$active} plugin<light_cyan></bold>");
    switch($plugin['filename']){
        case 'show-language':
            $highlighter->addPlugin(new Plugin\ShowLanguage);
            break;
        case 'line-numbers':
            $highlighter->addPlugin(new Plugin\LineNumbers);
            break;
        case 'show-invisibles':
            $highlighter->addPlugin(new Plugin\ShowInvisibles);
            break;
    }
    $content = $parsedown->text($fs->read($plugin['path']));
    $content = $twig->render('default.html', compact('content', 'active', 'site'));
    $content = $highlighter->highlightHTML($content);
    $fs->put("/plugins/{$active}/index.html", $content);
}

/**************************************************************
 * Code Samples page
 **************************************************************/
$samples = $fs->listContents('/_data/code/');
$meta = [];

$samples =  array_filter($samples, 'filter_dirs');

foreach ($samples as $sample) {
    $lang = $sample['filename'];
    $console->out("<light_green>Building</light_green> <bold><light_cyan>{$lang}<light_cyan></bold>");

    $doc = Parser::parse($fs->read($sample['path']));
    $meta[] = $doc->getConfig();
    $code = $highlighter->highlightText($doc->getContent(), $lang);
    $txt = $twig->render('code-partial.html', compact('meta','code'));
    $fs->put("/samples/partials/{$lang}.html", $txt);
}

$active = 'samples';
$console->out("<light_green>Building</light_green> <bold><light_cyan>Sample Pages<light_cyan></bold>");
$txt = $twig->render('samples.html', compact('active', 'site', 'meta'));
$fs->put("/samples/index.html", $txt);

libxml_use_internal_errors(false);
